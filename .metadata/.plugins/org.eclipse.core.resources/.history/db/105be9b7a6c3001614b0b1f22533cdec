import java.util.List; 
import java.util.Date;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


public class ManageEmployee {
	private static SessionFactory factory;
	
	public static void main(String args[]) {
		try {
			factory = new Configuration().configure().buildSessionFactory();
		} catch(Throwable ex) {
			System.err.println("Failed to create sessionFactory object." + ex);
			throw new ExceptionInInitializerError(ex);
		}
		
		ManageEmployee manageEmployee = new ManageEmployee();
		
		/* Add few employee records in database */
		
		Integer empID1 = manageEmployee.addEmployee("Zara", "Ali", 1000);
		Integer empID2 = manageEmployee.addEmployee("Daisy", "Das", 5000);
		Integer empID3 = manageEmployee.addEmployee("John", "Paul", 10000);
		
		/* List down all the employees */
		manageEmployee.listEmployees();
	}
	
	public Integer addEmployee(String firstName, String lastName, int salary) {
		Session session = factory.openSession();
		Transaction transaction = null;
		Integer employeeID = null;
		
		try {
			transaction = session.beginTransaction();
			Employee employee = new Employee(firstName, lastName, salary);
			employeeID = (Integer) session.save(employee);
			transaction.commit();
		} catch(HibernateException e) {
			if (transaction != null) {
				transaction.rollback();
				e.printStackTrace();
			  }
			} finally { 
				session.close();
			}
			return employeeID;
		}
	
	/*Method to READ all the employees */
	public void listEmployees() {
		Session session = factory.openSession();
		Transaction transaction = null;
		
		try {
			transaction = session.beginTransaction();
			List<Employee> employees = session.createQuery("FROM Employee").list();
			
			for (Iterator iterator = employees.iterator();
					iterator.hasNext();) {
				Employee employee = (Employee) iterator.next();
				System.out.print("First Name: " + employee.getFirstName());
				System.out.print(" Last Name: " + employee.getLastName());
				System.out.println(" Salary: "  + employee.getSalary());
			}
			transaction.commit();
		} catch(HibernateException e) {
			if (transaction != null) {
				transaction.rollback();
				e.printStackTrace();
			}
		}finally {
				session.close();
			}
		}
		
		/*Method to DELETE an employee from the records */
		public void deleteEmployee(Integer EmployeeID) {
			Session session = factory.openSession();
			Transaction transaction = null;
			
			try {
				transaction = session.beginTransaction();
				Employee employee = (Employee)session.get(Employee.class, EmployeeID);
				session.delete(employee);
				transaction.commit();
			} catch (HibernateException e) {
				if (transaction != null) {
					transaction.rollback();
					e.printStackTrace();
				}
				} finally {
					session.close();
				}
			}
		
	
	}


